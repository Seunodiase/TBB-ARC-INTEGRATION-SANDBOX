/* eslint-disable max-lines */
import { checkID, circulateDraf, createDraf, createTasks } from '../request';

describe('Create Draft', () => {
  it('Should fail due to bad AND scheme', async () => {
    const body = {};
    const expectedResponse = {
      request_id: '1-6171b052-604028fc13f7962d700a0c36',
      error_message: 'unable to unmarshal ANS',
      error_code: 'ErrInvalidData',
    };
    const response = await createDraf(JSON.stringify(body))
      .then(response => response)
      .catch(error => error.message);

    expect(response).toEqual(JSON.stringify(expectedResponse));
  });

  it('Should be pass through good AND scheme', async () => {
    const body = {
      _id: 'CPON7RXMFJHWFHQ7P67X2C6RBI',
      additional_properties: {
        has_published_copy: false,
      },
      canonical_website: 'the-baltimore-banner',
      content_elements: {},
      description: {
        basic: 'description mocked data',
      },
      headlines: {
        basic: 'title mocked data',
      },
      label: {
        paywall: {
          display: true,
          text: 'Metered',
          url: '',
        },
        wire: {
          display: true,
          text: 'Generated by LedeAI',
          url: '/content-type/lede-ai/',
        },
      },
      language: 'us',
      owner: {
        id: 'sandbox.baltimorebanner',
        sponsored: false,
      },
      version: '0.10.7',
      taxonomy: {
        tags: [
          {
            description: 'xMNS',
            slug: 'xmns',
            text: 'xMNS',
          },
          {
            description: 'xMobileApp',
            slug: 'xmobileapp',
            text: 'xMobileApp',
          },
          {
            description: 'xAppleNews',
            slug: 'xapplenews',
            text: 'xAppleNews',
          },
          {
            description: 'xFlipboard',
            slug: 'xflipboard',
            text: 'xFlipboard',
          },
        ],
      },
      type: 'story',
      workflow: {
        status_code: 9,
      },
    };
    const expectedResponse = {
      id: 'CPON7RXMFJHWFHQ7P67X2C6RBI',
      type: 'STORY',
      created_at: '2022-08-29T22:56:52.374Z',
      draft_revision_id: 'VTOW53NE75P27E7CQUYZE4NTXA',
    };

    const response = (await createDraf(
      JSON.stringify(body),
    )) as unknown as typeof expectedResponse;

    expect(response).not.toBeNull();
    expect(response).toHaveProperty('created_at');
    expect(response).toHaveProperty('draft_revision_id');
    expect(response).toHaveProperty('type');
    expect(response).toHaveProperty('id');
    expect(response.id).toEqual(expectedResponse['id']);
    expect(response.type).toEqual(expectedResponse['type']);
  });
});

describe('Check ID', () => {
  it('Should not return stories since we do not send Stories ID', async () => {
    const body = [''];
    const expectedResponse = {
      message: 'No stories were found matching any of the provided ids.',
    };

    const response = await checkID(body).then(response => response);
    expect(response).toStrictEqual(expectedResponse);
  });
  it('It should return the IDs of the stories that exist', async () => {
    const body = [
      '6FDP2EO4DJPO5OI4KWHN4QMSUM',
      'R7MOXVB3AFMXXKS7SAQIG2H5ME',
      'B5REBTMNJBP47HO264Q2QH5NGI',
      'XDAWJAWYEBLWJMJ3CQ5DIOUWX4',
      'F4HA2UHFYFJ4NNZOTKXYE6PASA',
      'P47L4FZLL5M6RL5EARJ6DVKZTA',
      'ZLG7OHVWJFKINN6Y2GKZ7U24GQ',
      'this_not_Exist',
      '123412321',
    ];
    const expectedResponse = {
      content_elements: [
        { _id: '6FDP2EO4DJPO5OI4KWHN4QMSUM' },
        { _id: 'R7MOXVB3AFMXXKS7SAQIG2H5ME' },
        { _id: 'B5REBTMNJBP47HO264Q2QH5NGI' },
        { _id: 'XDAWJAWYEBLWJMJ3CQ5DIOUWX4' },
        { _id: 'F4HA2UHFYFJ4NNZOTKXYE6PASA' },
        { _id: 'P47L4FZLL5M6RL5EARJ6DVKZTA' },
        { _id: 'ZLG7OHVWJFKINN6Y2GKZ7U24GQ' },
      ],
      type: 'results',
      version: '0.6.0',
    };

    const response = await checkID(body).then(response => response);
    expect(response).toEqual(expectedResponse);
  });
});

describe('Create Tasks', () => {
  it('Should fail due to bad payload schema', async () => {
    const body = '';
    const expectedResponse = {
      error_message: 'Not enough data to launch a notification',
      error_code: 'ErrInvalidData',
    };

    const response = await createTasks(body)
      .then(response => response)
      .catch(error => error);

    expect(response).not.toBeNull();
    expect(response).toEqual(new Error(JSON.stringify(expectedResponse)));
  });

  it('Should be pass through good payload scheme', async () => {
    const body = 'BKRSVUDGTBDPJLZ6LPT3IBW4EM';
    const expectedResponse = {
      id: '631b9f18abcae5368c10c382',
      storyID: 'BKRSVUDGTBDPJLZ6LPT3IBW4EM',
      type: 4,
      createdDate: 1662754584,
      events: [
        {
          priority: 2,
          assignedGroup: '6305264602df01283daea756',
          datetime: 1662754584,
          user: {},
          status: 1,
        },
      ],
      latestEvent: {
        priority: 2,
        assignedGroup: '6305264602df01283daea756',
        datetime: 1662754584,
        user: {},
        status: 1,
      },
      creationEvent: {
        priority: 2,
        assignedGroup: '6305264602df01283daea756',
        datetime: 1662754584,
        user: {},
        status: 1,
      },
      taskTemplateId: null,
      website: 'the-baltimore-banner',
      authoringApp: null,
      startDate: null,
      content: {
        type: 'ans',
        contentId: 'BKRSVUDGTBDPJLZ6LPT3IBW4EM',
      },
    };

    const response = await createTasks(body)
      .then(response => response)
      .catch(error => error);

    expect(response).not.toBeNull();
    expect(response).toEqual(expectedResponse);
  });
});

describe('Circulate Draft', () => {
  it('Should fail due to bad payload schema', async () => {
    const body = '';
    const expectedResponse = {
      error_message: 'Not enough data to launch a notification',
      error_code: 'ErrInvalidData',
    };

    const response = await circulateDraf(body)
      .then(response => response)
      .catch(error => error);

    expect(response).not.toBeNull();
    expect(response).toEqual(new Error(JSON.stringify(expectedResponse)));
  });

  it('Should be pass through good payload scheme', async () => {
    const body = 'KTN7P6LXRJDAXIFCZTLPBY6UG4';
    const expectedResponse = {
      document_id: body,
      website_id: 'the-baltimore-banner',
      website_primary_section: {
        type: 'reference',
        referent: {
          type: 'section',
          id: '/topic/sports/high-school-sports',
          website: 'the-baltimore-banner',
        },
      },
      website_sections: [
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/topic/sports/high-school-sports',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/topic/sports',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/topic',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/content-type/article',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/content-type',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/partners/lede-ai',
            website: 'the-baltimore-banner',
          },
        },
        {
          type: 'reference',
          referent: {
            type: 'section',
            id: '/partners',
            website: 'the-baltimore-banner',
          },
        },
      ],
      website_url: '',
    };

    const response = await circulateDraf(body)
      .then(response => response)
      .catch(error => error);

    expect(response).not.toBeNull();
    expect(response).toEqual(expectedResponse);
  });
});
